Binary Tree

Tree nodes

class TreeNode {
	int key;
	TreeNode left;
	TreeNode right;
	public TreeNode(int key) {
		this.key = key;
	}
}

LinkedList is a special kind of Tree (if there is only one child for each of the node in the binary tree, it can be reduced to a linked list)

Usually, we use the root to represent the binary tree.

General Tree, each node can have arbitrary number of children.

class TreeNode {
	int key;
	List<TreeNode> children;
	public TreeNode(int key) {
		this.key = key;
		children = new ArrayList<TreeNode>();
	}
}

Tree is special kind of Graph

class GraphNode {
	int key;
	List<GraphNode> neighbors;
	public GraphNode(int key) {
		this.key = key;
		neighbors = new ArrayList<GraphNode>();
	}
}

List<GraphNode> graph;

Other representation: Adjacency list
List<List<Integer>> graph;

Traversals of Binary Tree
preorder: root, left sub, right sub
inorder: left sub, root, right sub
postorder: left sub, right sub, root

Recursive:
	divide and conquer is nature of binary tree
		- solve problem for left/right subtree
		- solve the problem for root

Iterative
	could be complicated for binary tree

Binary Search Tree (BST)
is a binary tree maintains the following property:
	for any of the nodes in the binary tree, all the nodes in its subtree is larger than itself, all the nodes in its left subtree is smaller than itself (compared by the key stored in each of the nodes).

Basic Operations of Binary Search Tree
	- search(): O(height) worse case O(n), average O(logn)
	- insert(): O(height) worse case O(n), average O(logn)
	- remove(): O(height) worse case O(n), average O(logn)

Balanced Binary Search Tree (Self-balancing BST)
search(), insert(), remove() operations are all guaranteed to be O(logn)
Eg. AVL Tree, Red-Black Tree, etc

Red-Black Tree
	- Java: TreeMap/TreeSet
	- C++: map/set

Tail Recursion
The recursive call is always the last execution statement.
We can easily transfer the tail recursive to iterative solution.
  