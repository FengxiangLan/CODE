1. Breadth-First Search 
Use queue store children (FIFO)
*** put my left child then put my right child ***
*** expand my left child then expand my right child ***

How to describe a Breadth-First Search
	1. maintain a FIFO queue, put all traversed nodes that haven't been expanded

	2. Expand a node like visit/print its value

	3. Generate neighbor nodes

	4. Termination condition: do a loop until the queue is empty

	5. Optionally deduplicate visited nodes

Example 1: Bipartite

1 -- 2 -- 4
 \    \
  \    \
   3 --- 5

Data structure: FIFO queue
Initialize: enqueue 1, color 1 with u
For each step:
Expand: dequeue the first element (x) of the queue
Generate: enqueue all the neightbors (y) and color them with the other color
     case 1: y is generated before
     	case 1.1: y's color is different from x's color, ignore
     	case 1.2: y's colot is the same as x's color, CONFLICT
Terminate: queue is emoty or when there's a conflict
Dedup: record each node's color (empty, u, v)

Example 2: Determine whether a binary tree is a complete binary tree

			1
		/	 	\
	   3		 2
	  /	 \		/  \
	 5    4   null  9
	/ \  / \
null null null null	

Data structure: 
	FIFO queue
	flag: whether I detected bubbles
Expand: dequeue
Generate:
	when the flag is off, if left child or right child is null, set flag
	when the flag is on, if left child or right child is not null, return false;
Terminate
	queue is empty or return false in the generation process

2. Best First Search
Dijkstra's algorithm
	1. Usages: find the shortest path cost from a single node (source node) to any other nodes in that graph
	2. Data structure: priority_queue (minHeap)
     
        1  (s)   10
	6 ----- 4 ----- 5 \ 1
	        |		|  \
	       1|	   1|   1 (goal)
	        |		|  /
	        3 ----- 2 / 1
	        	1
Data structure:
Prority queue (min heap)
Expanded node <4, 0> <6, 1> <3, 1> <2, 2> <5, 3> <1, 4>

Algorithm:
Initialize: enqueue <the source node, 0>
For each step:
	Expand:
		dequeue the node (x) with smallest distance from the source - O(logn)
		dedup: if x has been expanded before, don't generate anything
	Generate:
		enqueue all neighbors <the neighbor, dist(x) + weight(x->y)> - O(out-deg * logn)
		if (dist(x) + weight(x->y) >= dist(y)), ignore
		if (dist(x) + weight(x->y) < dist(y)), enqueue
	Terminate
		the queue is empty
	Dedup:
		each node is expanded only once

For example: 
	Initialize: <4, 0>
	step1:
		Expand (queue <4, 0>)
			dequeue <4, 0>
			not visited(4)
		Generated
			enqueue <6, 1> <3, 1> <5, 10>
	step2:
		Expand (queue <6, 1> <3, 1> <5, 10>)
			dequeue <6, 1>
			not visited(6)
		Generated
			NONE
	step3:
		Expand (queue <3, 1> <5, 10>)
			dequeue <3, 1>
			not visited(3)
		Generated
			<2, 2>
	step4:
		Expand (queue <2, 2> <5, 10>)
			dequeue <2, 2>
			not visited(2)
		Generated
			<5, 3>
			<1, 3>
	step5:
		Expand (queue <1, 3> <5, 3>)
			dequeue <5, 3>
			not visted(5)
		Generated
			NONE
	step6:
		Expand (<1, 3>)
			dequeue <1, 3>
			not visited(1)
		Generated
			NONE
	step7:
		queue is empty

